name: Bors
on:
  push:
    branches: [ no-such-branch-disabling-workflow ]
#  push:
#    branches: [ trying, staging ]

concurrency:
  # do not run more than once for latest push/update
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  statuses: write
  checks: write

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always

jobs:
  ci-success:
    name: Bors-CI
    if: always()
    needs: [ build-and-test, audit, code-coverage ]
    runs-on: ubuntu-latest
    steps:
      # a filler
      - run: true

  conditions:
    name: Conditions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          Get-Content .github/config.txt | Out-File $env:GITHUB_OUTPUT
        id: values
        shell: pwsh
    outputs:
      build-opts: ${{ steps.values.outputs.build-opts }}
      target: ${{ steps.values.outputs.target }}
      toolchain: ${{ steps.values.outputs.toolchain }}
      clippy-opts: ${{ steps.values.outputs.clippy-opts }}
      exclude-tests: ${{ steps.values.outputs.exclude-tests}}

  build-and-test:
    name: Build and Test Project
    runs-on: ubuntu-latest
    needs: conditions
    env:
      BUILD_OPTS: ${{needs.conditions.outputs.build-opts}}
      CLIPPY_OPTS: ${{needs.conditions.outputs.clippy-opts}}
      TARGET: ${{needs.conditions.outputs.target}}
      WASM_BUILD_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      RUSTUP_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      EXCLUDE_TESTS: ${{needs.conditions.outputs.exclude-tests}}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - run: |
        sudo apt-get install -y protobuf-compiler
        sudo apt-get install solc

      - name: Cargo fmt Check
        if: success()
        run: cargo fmt --all -- --check

      - name: Fetch Deps
        run: |
          cargo fetch --locked

      - name: Build default target
        env:
          CARGO_NET_OFFLINE: true
        run: |
          cargo build $BUILD_OPTS

      - name: Check benchmarking builds
        env:
          CARGO_NET_OFFLINE: true
        run: |
          cargo check --release --features runtime-benchmarks

      - name: Upload timechain-node binary
        if: ${{ github.ref == 'refs/heads/staging' }}
        uses: actions/upload-artifact@v3
        with:
          name: timechain-node
          path: target/release/timechain-node

      - name: Run Unit tests
        env:
          CARGO_NET_OFFLINE: true
        run: |
          cargo test --lib --workspace --locked $BUILD_OPTS \
            $(for i in $EXCLUDE_TESTS; do echo "--exclude $i"; done )

      - name: Run Examples
        env:
          CARGO_NET_OFFLINE: true
        run: |
          cargo test --examples --workspace --locked $BUILD_OPTS

      - name: Clippy
        uses: actions-rs/clippy-check@v1
        env:
          CARGO_NET_OFFLINE: true
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          # `--no-deps` does not check dependencies out of workspace
          args: --all-targets --workspace ${{env.BUILD_OPTS}} -- --no-deps ${{env.CLIPPY_OPTS}}
          name: Clippy Report

      - name: Run Integration/Heavy Test
        if: ${{ needs.conditions.outputs.integration == 'true' }}
        env:
          CARGO_NET_OFFLINE: true
        run: |
          cargo test --test '*' --workspace --locked $BUILD_OPTS

  audit:
    name: Cargo Audit
    needs: [conditions]
    runs-on: ubuntu-latest
    env:
      BUILD_OPTS: ${{needs.conditions.outputs.build-opts}}
      CLIPPY_OPTS: ${{needs.conditions.outputs.clippy-opts}}
      TARGET: ${{needs.conditions.outputs.target}}
      WASM_BUILD_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      RUSTUP_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      EXCLUDE_TESTS: ${{needs.conditions.outputs.exclude-tests}}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - run: cargo install cargo-audit --locked 

      - name: Audit
        run: |
          $r = (cargo audit -q --json | ConvertFrom-Json)
          $e = $?
          $r.vulnerabilities.list | Select-Object -ExpandProperty Advisory
          if (!$e) { exit 1 }
        shell: pwsh

  code-coverage:
    name: Report Code Coverage
    # we can need to update code coverage stats on the default branch
    if: ${{ github.ref == 'refs/heads/staging' }}
    needs: [conditions]
    runs-on: ubuntu-latest
    env:
      BUILD_OPTS: ${{needs.conditions.outputs.build-opts}}
      CLIPPY_OPTS: ${{needs.conditions.outputs.clippy-opts}}
      TARGET: ${{needs.conditions.outputs.target}}
      WASM_BUILD_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      RUSTUP_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      EXCLUDE_TESTS: ${{needs.conditions.outputs.exclude-tests}}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - run: |
        sudo apt-get install -y protobuf-compiler
        sudo apt-get install solc

      - name: Setup llvm-cov for cargo
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Unit Tests
        # use --tests to measure coverage with all tests
        # use --test '*' to measure coverage with integration-tests
        # use --lib to measure coverage with unit-tests
        run: |
          cargo llvm-cov test --lib --locked --workspace \
            --lcov --output-path lcov.info  $BUILD_OPTS \
            $(for i in $EXCLUDE_TESTS; do echo "--exclude $i"; done )

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true
