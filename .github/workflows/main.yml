#####
#
#  when PR is updated by pushing changes to the branch
#     CI skips all jobs for Drafted PRs by default
#     CI skips all jobs for PRs labeled with `!ci-skip`
#
#  Labels:
#    !ci-draft   - runs CI for drafted PR
#    !ci-codecov - runs Code Coverage job on every PR update
#    !ci-audit   - runs Cargo Audit job on every PR update
#    !ci-integration - runs Integration Tests on every PR updates
#    !ci-skip    - skips All jobs
#

name: Main
on:
  push:
    branches: [ no-such-branch-disabling-workflow ]
#  push:
#    # add your default branch if is not there
#    # however you really want to run CI on that branch
#    # do not forget set env.RUNALL_ONPUSH to true
#    branches: [ trying, staging ]
#  pull_request:
#    types: [ synchronize, opened, ready_for_review, labeled, unlabeled ]
#    paths-ignore:
#      - '**/*.md' # do not run CI on pull_request update if just MD files are changed


concurrency:
  # do not run more than once for latest push/update
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  statuses: write
  checks: write

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always

jobs:
  # it calculates conditions to run following jobs
  conditions:
    name: Conditions
    if: ${{
      ( github.event_name != 'pull_request' ||
        ( github.event.action != 'labeled' &&
          github.event.action != 'unlabeled' &&
          ( contains(github.event.pull_request.labels.*.name,'!ci-draft') ||
            github.event.pull_request.draft == false )) ||
          ( github.event.action == 'labeled' &&
            ( github.event.label.name == '!ci-draft' ||
              contains(github.event.pull_request.labels.*.name,'!ci-draft') ||
            github.event.pull_request.draft == false ) &&
          ( github.event.label.name == '!ci-codecov' ||
            github.event.label.name == '!ci-audit'||
            github.event.label.name == '!ci-integration' ||
            github.event.label.name == '!ci-draft' ) )  ||
        ( github.event.action == 'unlabeled' && github.event.label.name == '!ci-skip' )) && 
      ( !contains(github.event.pull_request.labels.*.name,'!ci-skip') ||
        ( github.event.action == 'unlabeled' && github.event.label.name == '!ci-skip' ))
      }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          Get-Content .github/config.txt | Out-File $env:GITHUB_OUTPUT
        id: values
        shell: pwsh
    outputs:
      build-opts: ${{ steps.values.outputs.build-opts }}
      target: ${{ steps.values.outputs.target }}
      toolchain: ${{ steps.values.outputs.toolchain }}
      clippy-opts: ${{ steps.values.outputs.clippy-opts }}
      exclude-tests: ${{ steps.values.outputs.exclude-tests}}
      codecov: ${{ contains(github.event.pull_request.labels.*.name,'!ci-codecov') }}
      integration: ${{ contains(github.event.pull_request.labels.*.name,'!ci-integration') }}
      audit: ${{ contains(github.event.pull_request.labels.*.name,'!ci-audit') }}

  # It separates cache from Clippy and tests
  # Since the project must be compiled heere this job has that responsibility
  # It checks code style before to build the project to not rebuild it again after fixes
  build-cache:
    name: Build Cache
    needs: [conditions]
    runs-on: ubuntu-latest
    env:
      BUILD_OPTS: ${{needs.conditions.outputs.build-opts}}
      CLIPPY_OPTS: ${{needs.conditions.outputs.clippy-opts}}
      TARGET: ${{needs.conditions.outputs.target}}
      WASM_BUILD_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      RUSTUP_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      EXCLUDE_TESTS: ${{needs.conditions.outputs.exclude-tests}}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Set up cache
        uses: actions/cache@v3
        id: cache-flag
        continue-on-error: false
        with:
          path: |
            ./Cargo.toml
          key: "Flag-${{ runner.os }}-r${{env.RUSTUP_TOOLCHAIN}}-${{ hashFiles('**/Cargo.lock') }}"

      - run: sudo apt-get install -y protobuf-compiler

      - name: Cargo fmt Check
        if: steps.cache-flag.outputs.cache-hit != 'true'
        run: cargo fmt --all --check

      - name: Check benchmarking builds
        run: cargo check --release --features runtime-benchmarks

      - name: Set up cache
        if: steps.cache-flag.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        id: cache
        continue-on-error: false
        with:
          path: |
            ~/.cargo
            target/
          key: "Main-${{ runner.os }}-r${{steps.rustc-version.outputs.value}}-${{ hashFiles('**/Cargo.lock') }}"

      - name: Warming up the cache
        # do not run if cache exists
        #  because of it will not affect tests/clippy, just will take a time
        if: ${{ steps.cache-flag.outputs.cache-hit != 'true' && steps.cache.outputs.cache-hit != 'true' }}
        run: |
          cargo fetch --locked
          find ~/.cargo -type d -name ".git" -exec rm -f '{}/objects/pack/*.pack' \;
          cargo fetch --locked

      - name: Check that the application builds successfully
        if: ${{ steps.cache-flag.outputs.cache-hit != 'true' && steps.cache.outputs.cache-hit != 'true' }}
        run: |
          cargo build --all-targets --workspace --offline $BUILD_OPTS
          cargo test --lib --workspace --offline $BUILD_OPTS \
            $(for i in $EXCLUDE_TESTS; do echo "--exclude $i"; done )
        env:
          CARGO_NET_OFFLINE: true

      - name: Clean up cache
        if: ${{ steps.cache-flag.outputs.cache-hit != 'true' && steps.cache.outputs.cache-hit != 'true' }}
        run: |
          #find target/$TARGET -type f ! \( -name "*.so.*" -o -name "*.so" \) -executable -delete
          #find target/$TARGET -maxdepth 1 -type f -delete
          #rm -rf target/$TARGET/examples
          #rm -rf target/$TARGET/wbuild/*/target
          rm -rf target/$TARGET/build/librocksdb-sys-*/out/rocksdb

    outputs:
      hit-flag: ${{ steps.cache-flag.outputs.cache-hit == 'true' }}

  build-app:
    name: Re-Build App
    needs: [conditions, build-cache]
    runs-on: ubuntu-latest
    if: needs.build-cache.outputs.hit-flag == 'true'
    env:
      BUILD_OPTS: ${{needs.conditions.outputs.build-opts}}
      TARGET: ${{needs.conditions.outputs.target}}
      CLIPPY_OPTS: ${{needs.conditions.outputs.clippy-opts}}
      WASM_BUILD_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      RUSTUP_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      EXCLUDE_TESTS: ${{needs.conditions.outputs.exclude-tests}}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - run: sudo apt-get install -y protobuf-compiler

      - name: Cargo fmt Check
        run: cargo fmt --all --check

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        continue-on-error: false
        with:
          path: |
            ~/.cargo
            target/
          key: "Main-${{ runner.os }}-r${{steps.rustc-version.outputs.value}}-${{ hashFiles('**/Cargo.lock') }}"

      - name: Build App
        run: |
          cargo build --offline $BUILD_OPTS
        env:
          CARGO_NET_OFFLINE: true

  # it tests the project with Clippy and Unit/Integration tests
  tests:
    name: Unit Tests
    needs: [conditions, build-cache]
    runs-on: ubuntu-latest
    env:
      BUILD_OPTS: ${{needs.conditions.outputs.build-opts}}
      TARGET: ${{needs.conditions.outputs.target}}
      CARGO_NET_OFFLINE: true
      WASM_BUILD_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      RUSTUP_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      EXCLUDE_TESTS: ${{needs.conditions.outputs.exclude-tests}}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - run: sudo apt-get install -y protobuf-compiler
      - run: sudo apt-get install solc

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        continue-on-error: false
        with:
          path: |
            ~/.cargo
            target/
          key: "Main-${{ runner.os }}-r${{steps.rustc-version.outputs.value}}-${{ hashFiles('**/Cargo.lock') }}"

      - name: Run Unit tests
        id: unit-tests
        run: |
          cargo test --lib --workspace --offline $BUILD_OPTS \
            $(for i in $EXCLUDE_TESTS; do echo "--exclude $i"; done )

      - name: Run Examples
        run: |
          cargo test --examples --workspace --offline $BUILD_OPTS


  integration:
    name: Integration Tests
    needs: [conditions, build-cache]
    runs-on: ubuntu-latest
    if: ${{ needs.conditions.outputs.integration == 'true' }}
    env:
      BUILD_OPTS: ${{needs.conditions.outputs.build-opts}}
      TARGET: ${{needs.conditions.outputs.target}}
      CARGO_NET_OFFLINE: true
      WASM_BUILD_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      RUSTUP_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - run: sudo apt-get install -y protobuf-compiler

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        continue-on-error: false
        with:
          path: |
            ~/.cargo
            target/
          key: "Main-${{ runner.os }}-r${{steps.rustc-version.outputs.value}}-${{ hashFiles('**/Cargo.lock') }}"

      - name: Run Integration/Heavy Tests
        run: |
          cargo test --offline --test '*' --workspace $BUILD_OPTS

  # it tests the project with Clippy and Unit/Integration tests
  clippy:
    name: Clippy
    needs: [conditions, build-cache]
    runs-on: ubuntu-latest
    env:
      BUILD_OPTS: ${{needs.conditions.outputs.build-opts}}
      TARGET: ${{needs.conditions.outputs.target}}
      CARGO_NET_OFFLINE: true
      CLIPPY_OPTS: ${{needs.conditions.outputs.clippy-opts}}
      WASM_BUILD_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      RUSTUP_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      EXCLUDE_TESTS: ${{needs.conditions.outputs.exclude-tests}}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - run: sudo apt-get install -y protobuf-compiler

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        continue-on-error: false
        with:
          path: |
            ~/.cargo
            target/
          key: "Main-${{ runner.os }}-r${{steps.rustc-version.outputs.value}}-${{ hashFiles('**/Cargo.lock') }}"

      - name: Check sources with Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          # `--no-deps` does not check dependencies out of workspace
          args: --all-targets --offline --workspace ${{env.BUILD_OPTS}} -- --no-deps ${{env.CLIPPY_OPTS}}
          name: Clippy Report

  # it does security audit for known issues with list of dependencies
  audit:
    name: Cargo Audit
    if: ${{ needs.conditions.outputs.audit == 'true' }}
    needs: [conditions]
    runs-on: ubuntu-latest
    env:
      WASM_BUILD_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      RUSTUP_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      # looks like it's better to use plane text reporter
      #  because of an error in audit check action
      #  when it used on pull-requests
      - name: Set up cache
        id: cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/cargo-audit
          key: "Audit-${{ runner.os }}-r${{steps.rustc-version.outputs.value}}-${{ hashFiles('**/Cargo.lock') }}"

      - name: Warm up the cache
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: |
          cargo install cargo-audit --locked 

      - name: Audit
        run: |
          $r = (cargo audit -q --json | ConvertFrom-Json)
          $e = $?
          $r.vulnerabilities.list | Select-Object -ExpandProperty Advisory
          if (!$e) { exit 1 }
        shell: pwsh

  # it measures code coverage and reports to codecov.io
  code-coverage:
    name: Report Code Coverage
    # we can need to update code coverage stats on the default branch
    if: ${{ needs.conditions.outputs.codecov == 'true' }}
    needs: [conditions]
    runs-on: ubuntu-latest
    env:
      BUILD_OPTS: ${{ needs.conditions.outputs.build-opts }}
      TARGET: ${{ needs.conditions.outputs.target }}
      WASM_BUILD_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
      RUSTUP_TOOLCHAIN: ${{needs.conditions.outputs.toolchain}}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - run: sudo apt-get install -y protobuf-compiler

      - name: Setup llvm-cov for cargo
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Set up cache
        id: cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo
            target/
          key: "Codecov-${{ runner.os }}-r${{steps.rustc-version.outputs.value}}-${{ hashFiles('**/Cargo.lock') }}"

      - name: Warm up the cache
        if: ${{steps.cache.outputs.cache-hit != 'true'}}
        run: |
          cargo fetch --locked
          find ~/.cargo -type d -name ".git" -exec rm -f '{}/objects/pack/*.pack' \;
          cargo fetch --locked

      - name: Unit Tests
        # use --tests to measure coverage with all tests
        # use --test '*' to measure coverage with integration-tests
        # use --lib to measure coverage with unit-tests
        env:
          CARGO_NET_OFFLINE: true
        run: |
          cargo llvm-cov test --lib --locked --workspace \
            --lcov --output-path lcov.info  $BUILD_OPTS \
            $(for i in $EXCLUDE_TESTS; do echo "--exclude $i"; done )

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true

      - name: Clean up cache
        if: ${{needs.conditions.outputs.use-cache == 'true' && steps.cache.outputs.cache-hit != 'true'}}
        run: |
          find target/llvm-cov-target/$TARGET -type f ! \( -name "*.so.*" -o -name "*.so" \) -executable -delete
          find target/llvm-cov-target/$TARGET -maxdepth 1 -type f -delete
          rm -rf target/llvm-cov-target/$TARGET/build/librocksdb-sys-*/out/rocksdb
