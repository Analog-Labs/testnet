use super::*;
#[allow(unused)]
use crate::Pallet as TesseractSigStorage;
use frame_benchmarking::{benchmarks, whitelisted_caller};
use frame_system::RawOrigin;
use sp_core::Decode;
use sp_std::vec;
use time_primitives::{crypto::Signature, ForeignEventId, TimeId};

pub const ALICE: TimeId = TimeId::new([1u8; 32]);
pub const BOB: TimeId = TimeId::new([2u8; 32]);
pub const CHARLIE: TimeId = TimeId::new([3u8; 32]);

// Check if last event generated by pallet is the one we're expecting
fn assert_last_event<T: Config>(generic_event: <T as Config>::RuntimeEvent) {
	frame_system::Pallet::<T>::assert_last_event(generic_event.into());
}

benchmarks! {
	store_signature {
		// generated using mock::print_valid_store_sig_args(sig_data)
		let sig_data = [123u8; 64];
		let raw_sig = [112, 94, 65, 50, 202, 50, 216, 57, 78, 154, 206, 43, 214, 11, 202, 162, 225, 121, 19, 154, 55, 148, 89, 59, 247, 148, 9, 142, 123, 29, 70, 33, 27, 8, 12, 97, 186, 163, 85, 132, 113, 249, 97, 164, 63, 2, 50, 122, 94, 108, 201, 154, 3, 206, 233, 161, 221, 141, 92, 237, 141, 49, 48, 139];
		let sig = Signature::decode(&mut (&raw_sig[..])).unwrap();
		let id: ForeignEventId = 1u128.into();
	}: _(RawOrigin::Signed(whitelisted_caller()), sig, sig_data, id)
	verify {
		assert!(<SignatureStoreData<T>>::get(id).len() > 0);
	}

	submit_tss_group_key {
		let s in 1 .. 255;
		let key = [s as u8; 33];
	}: _(RawOrigin::None, s.into(), key)
	verify {
		assert_last_event::<T>(Event::<T>::NewTssGroupKey(s.into(), key).into());
	}

	register_shard { }: _(RawOrigin::Root, vec![ALICE, BOB, CHARLIE], None)
	verify { }

	impl_benchmark_test_suite!(TesseractSigStorage, crate::mock::new_test_ext(), crate::mock::Test);
}
