
//! Autogenerated weights for `bridge_multisig`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.1
//! DATE: 2025-02-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ns1026992`, CPU: `AMD EPYC 4244P 6-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/mainnet/timechain-node
// benchmark
// pallet
// --pallet
// bridge_multisig
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./runtime/src/weights/mainnet/bridge_multisig.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use polkadot_sdk::*;

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `bridge_multisig`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> bridge_multisig::WeightInfo for WeightInfo<T> {
	/// Storage: `BridgeMultisig::Accounts` (r:1 w:0)
	/// Proof: `BridgeMultisig::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BridgeMultisig::Multisigs` (r:1 w:1)
	/// Proof: `BridgeMultisig::Multisigs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BridgeMultisig::DispatchedCalls` (r:1 w:0)
	/// Proof: `BridgeMultisig::DispatchedCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73 + s * (32 ±0)`
		//  Estimated: `3538 + s * (32 ±0)`
		// Minimum execution time: 12_544_000 picoseconds.
		Weight::from_parts(11_075_431, 0)
			.saturating_add(Weight::from_parts(0, 3538))
			// Standard Error: 247
			.saturating_add(Weight::from_parts(19_327, 0).saturating_mul(s.into()))
			// Standard Error: 2
			.saturating_add(Weight::from_parts(770, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(s.into()))
	}
	/// Storage: `BridgeMultisig::Accounts` (r:1 w:0)
	/// Proof: `BridgeMultisig::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BridgeMultisig::Multisigs` (r:1 w:1)
	/// Proof: `BridgeMultisig::Multisigs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BridgeMultisig::DispatchedCalls` (r:1 w:0)
	/// Proof: `BridgeMultisig::DispatchedCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `310 + s * (32 ±0)`
		//  Estimated: `3775 + s * (32 ±0)`
		// Minimum execution time: 13_786_000 picoseconds.
		Weight::from_parts(12_355_486, 0)
			.saturating_add(Weight::from_parts(0, 3775))
			// Standard Error: 255
			.saturating_add(Weight::from_parts(18_497, 0).saturating_mul(s.into()))
			// Standard Error: 2
			.saturating_add(Weight::from_parts(803, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(s.into()))
	}
	/// Storage: `BridgeMultisig::Accounts` (r:1 w:0)
	/// Proof: `BridgeMultisig::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BridgeMultisig::Multisigs` (r:1 w:1)
	/// Proof: `BridgeMultisig::Multisigs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BridgeMultisig::DispatchedCalls` (r:1 w:1)
	/// Proof: `BridgeMultisig::DispatchedCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BridgeMultisig::Calls` (r:1 w:1)
	/// Proof: `BridgeMultisig::Calls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SafeMode::EnteredUntil` (r:1 w:0)
	/// Proof: `SafeMode::EnteredUntil` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `385 + s * (53 ±0) + z * (1 ±0)`
		//  Estimated: `3845 + s * (53 ±0) + z * (1 ±0)`
		// Minimum execution time: 20_899_000 picoseconds.
		Weight::from_parts(18_111_497, 0)
			.saturating_add(Weight::from_parts(0, 3845))
			// Standard Error: 360
			.saturating_add(Weight::from_parts(35_275, 0).saturating_mul(s.into()))
			// Standard Error: 3
			.saturating_add(Weight::from_parts(1_255, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 53).saturating_mul(s.into()))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(z.into()))
	}
}
