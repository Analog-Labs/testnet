
//! Autogenerated weights for `task_metadata`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-91-90`, CPU: `Intel(R) Xeon(R) CPU E5-2676 v3 @ 2.40GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/timechain-node
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=task-metadata
// --extrinsic=*
// --steps=50
// --repeat=20
// --output=runtime/src/weights/task-metadata.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `task_metadata`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> task_metadata::WeightInfo for WeightInfo<T> {
	/// Storage: TaskMeta TaskMetaStorage (r:1 w:1)
	/// Proof Skipped: TaskMeta TaskMetaStorage (max_values: None, max_size: None, mode: Measured)
	fn insert_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3471`
		// Minimum execution time: 77_147_000 picoseconds.
		Weight::from_parts(80_625_000, 0)
			.saturating_add(Weight::from_parts(0, 3471))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: TaskMeta CollectionMeta (r:1 w:1)
	/// Proof Skipped: TaskMeta CollectionMeta (max_values: None, max_size: None, mode: Measured)
	fn insert_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3471`
		// Minimum execution time: 66_438_000 picoseconds.
		Weight::from_parts(69_080_000, 0)
			.saturating_add(Weight::from_parts(0, 3471))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
