
//! Autogenerated weights for `pallet_airdrop`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.1
//! DATE: 2025-01-19, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ns1026992`, CPU: `AMD EPYC 4244P 6-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/mainnet/timechain-node
// benchmark
// pallet
// --pallet
// pallet_airdrop
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./runtime/src/weights/testnet/pallet_airdrop.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use polkadot_sdk::*;

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_airdrop`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_airdrop::WeightInfo for WeightInfo<T> {
	/// Storage: `Airdrop::Claims` (r:1 w:1)
	/// Proof: `Airdrop::Claims` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Airdrop::Total` (r:1 w:1)
	/// Proof: `Airdrop::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Airdrop::Vesting` (r:1 w:1)
	/// Proof: `Airdrop::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Vesting::Vesting` (r:1 w:1)
	/// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1057), added: 3532, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	fn claim_raw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4352`
		//  Estimated: `7817`
		// Minimum execution time: 167_834_000 picoseconds.
		Weight::from_parts(177_021_000, 0)
			.saturating_add(Weight::from_parts(0, 7817))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `Airdrop::Claims` (r:1 w:1)
	/// Proof: `Airdrop::Claims` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Airdrop::Total` (r:1 w:1)
	/// Proof: `Airdrop::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Airdrop::Vesting` (r:0 w:1)
	/// Proof: `Airdrop::Vesting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2026`
		//  Estimated: `5491`
		// Minimum execution time: 38_462_000 picoseconds.
		Weight::from_parts(42_430_000, 0)
			.saturating_add(Weight::from_parts(0, 5491))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
